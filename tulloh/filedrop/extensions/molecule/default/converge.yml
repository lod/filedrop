---
- name: Converge
  hosts: all
  gather_facts: true
  tasks:
    # Common users: root, bin, daemon, lp, sync, mail, games, nobody
    # Common groups: adm, audio, bin, cdrom, daemon, dialout, disk, floppy,
    #                games, kmem, lp, mail, man, root, sys, tape, tty, users, video
    #
    # Rough test outline:
    #  etc/bob/ smith and smithy.j2 test file and template copies including contents
    #
    #  dumper/ d1,d2,d3 contain f1,f2,f3 and t1,t2,t3
    #  These are used to test permissions regex and exact permission patterns
    #
    #  dumper/ d4,d5,d6 contain p1 and a mix of f1 and f2
    #  These test directory inherit permissions, and the interaction with regex and exact

    - name: Do the thing
      filedrop:
        path_re:
          f1:
            owner: games
            group: dialout
            mode: '0600'
            notify: f1
          f2:
            mode: '0467'
          t1:
            owner: lp
            group: games
            mode: '0600'
            notify: t1
          d3:
            owner: sync
            group: tape
            mode: '0600'
          ðŸŽ©:
            group: daemon
          d[34]1/$:
            group: video
          d4111/layer2:
            owner: root
          ^/dumped/d2/f1$:
            owner: nobody
            group: video
            mode: '0600'
            notify:
              - d2 1
              - d2 2
          ^/dumped/d2/t1$:
            owner: bin
            group: tty
            mode: '0600'
          ^/dumped/d5/p2$:
            owner: games
            group: tty
            mode: '0600'
          ^/dumped/d4/d41/d411/$:
            mode: '4046'  # suid
            delete_unmanaged: True
          ^/dumped/d4/d41/d411/d4111/layer3$:
            owner: nobody
          ^/dumped/d4/d41/d411/d4111/layer21$:
            group: adm
      vars:
        template_var: templated
      register: dropped

    - name: Flush handlers so we can test them
      meta: flush_handlers


    - name: Test filedrop return
      ansible.builtin.assert:
        that:
          # Note that for the first run all new directories will be managed due to creation
          # Test looking for changed flag
          #
          # d4 has a .permissions.yml file, so it is managed
          # This means all directories below it must also be managed
          - dropped.tree["/dumped"].managed == dropped.tree["/dumped"].changed
          - dropped.tree["/dumped/d4"].managed == True  # File
          - dropped.tree["/dumped/d4/d41"].managed == True # Regex
          - dropped.tree["/dumped/d4/d42"].managed == True # Inherited
          - dropped.tree["/dumped/d4/d42/d421"].managed == True # Inherited
          - dropped.tree["/dumped/d4/d41/d411"].managed == True # Exact Regex
          - dropped.tree["/dumped/d4/d41/d411/d4111"].managed == True # File
          - dropped.tree["/dumped/d4/d41/d411/d4111/d41111"].managed == True # Inherited
          # d3 matches regex "d3" which is not a directory regex --> not managed
          - dropped.tree["/dumped/d3"].managed == dropped.tree["/dumped/d3"].changed
          # d3/d31/ matches regex "d[34]1/$" which is a directory regex
          - dropped.tree["/dumped/d3/d31"].managed == True
          # /etc/ should always exist, no initial creation
          - dropped.tree["/etc"].managed                                      == False
          - dropped.tree["/dumped"].managed                                   == False
          - dropped.tree["/dumped"].delete_unmanaged                          == False
          - dropped.tree["/dumped/d1"].managed                                == False
          - dropped.tree["/dumped/d1"].delete_unmanaged                       == False
          - dropped.tree["/dumped/d2"].managed                                == False
          - dropped.tree["/dumped/d2"].delete_unmanaged                       == False
          - dropped.tree["/dumped/d3"].managed                                == False
          - dropped.tree["/dumped/d3"].delete_unmanaged                       == False
          - dropped.tree["/dumped/d3/d31"].managed                            == True
          - dropped.tree["/dumped/d3/d31"].delete_unmanaged                   == False
          - dropped.tree["/dumped/d4"].managed                                == True
          - dropped.tree["/dumped/d4"].delete_unmanaged                       == False
          - dropped.tree["/dumped/d4/d41"].managed                            == True
          - dropped.tree["/dumped/d4/d41"].delete_unmanaged                   == False
          - dropped.tree["/dumped/d4/d41/d411"].managed                       == True
          - dropped.tree["/dumped/d4/d41/d411"].delete_unmanaged              == True
          - dropped.tree["/dumped/d4/d41/d411/d4111"].managed                 == True
          - dropped.tree["/dumped/d4/d41/d411/d4111"].delete_unmanaged        == False
          - dropped.tree["/dumped/d4/d41/d411/d4111/d41111"].managed          == True
          - dropped.tree["/dumped/d4/d41/d411/d4111/d41111"].delete_unmanaged == False
          - dropped.tree["/dumped/d5"].managed                                == True
          - dropped.tree["/dumped/d5"].delete_unmanaged                       == True

    - name: Test handler notifications fired
      ansible.builtin.assert:
        that:
          - f1 is defined
          - t1 is defined
          - d2_1 is defined
          - d2_2 is defined
      when: dropped.changed
      tags:
        - molecule-idempotence-notest  # Handlers won't fire for the idempotence run

  handlers:
    - name: f1
      ansible.builtin.set_fact:
        f1: True
    - name: Template handler
      listen: t1
      ansible.builtin.set_fact:
        t1: True
    - name: d2 1
      ansible.builtin.set_fact:
        d2_1: True
    - name: d2 2
      ansible.builtin.set_fact:
        d2_2: True
    - name: All
      debug:
        msg: HANDLER RUN
      listen:
        - f1
        - t1
        - d1 1
        - d2 2
