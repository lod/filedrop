---
- name: Verify
  hosts: all
  gather_facts: false
  tasks:
    - name: Fetch directory tree
      # Trying to dump the full tree from root doesn't work well, dev files etc.
      # So we go a little selective
      ansible.builtin.find:
        paths: "{{ item.path }}"
        recurse: "{{ item.recurse }}"
        file_type: "any"  # Include directories and links
        hidden: true  # Include hidden files
      register: find_res
      loop:
        - { path: "/", recurse: False }
        - { path: "/etc", recurse: True }
        - { path: "/dumped", recurse: True }
        #- { path: "/etc/profile.d", recurse: True }
        #- { path: "/etc/issue.d", recurse: True }

    #- name: Dump
      #ansible.builtin.debug:
        #var: find_res

    #- name: Dump2
      #ansible.builtin.debug:
        #msg: "{{ find_res.results | map(attribute='files') | flatten }}"

    - name: Set up file tree for lookups
      ansible.builtin.set_fact:
        tree: "{{ dict(files | map(attribute='path') | zip(files)) }}"
      vars:
        files: "{{ find_res.results | map(attribute='files') | flatten }}"

    #- name: Dump
    #  ansible.builtin.debug:
    #    var: tree
    #- name: Dump
    #  ansible.builtin.debug:
    #    msg: "{{ tree | list }}"
    
    - name: Dump dumped
      ansible.builtin.debug:
        var: tree["/dumped"]
    - name: Dump dumped/d4
      ansible.builtin.debug:
        var: tree["/dumped/d4"]

    # File details are as per the stat module
    # /smithy": {"atime": 1745542108.6770728, "ctime": 1745542045.7403781, "dev": 132, "gid": 0, "gr_name": "root", "inode": 97020399, "isblk": false, "ischr": false, "isdir": false, "isfifo": false, "isgid": false, "islnk": false, "isreg": true, "issock": false, "isuid": false, "mode": "0644", "mtime": 1745542043.0, "nlink": 1, "path": "/smithy", "pw_name": "root", "rgrp": true, "roth": true, "rusr": true, "size": 8, "uid": 0, "wgrp": false, "woth": false, "wusr": true, "xgrp": false, "xoth": false, "xusr": false}


    - name: Test expected files
      ansible.builtin.assert:
        that:
          - ("/rootfile" in tree)
          - ("/etc/bob" in tree)
          - ("/etc/bob/smith" in tree)
          - ("/etc/bob/smithy" in tree)
          # pw_name is the owner, gr_name the group
          - tree["/dumped/d1/f1"].pw_name == "games"
          - tree["/dumped/d2/f1"].pw_name == "nobody"
          - tree["/dumped/d3/f1"].pw_name == "sync"
          - tree["/dumped/d1/f1"].gr_name == "dialout"
          - tree["/dumped/d2/f1"].gr_name == "video"
          - tree["/dumped/d3/f1"].gr_name == "tape"
          - tree["/dumped/d1/t1"].pw_name == "lp"
          - tree["/dumped/d2/t1"].pw_name == "bin"
          - tree["/dumped/d3/t1"].pw_name == "sync"
          - tree["/dumped/d1/t1"].gr_name == "games"
          - tree["/dumped/d2/t1"].gr_name == "tty"
          - tree["/dumped/d3/t1"].gr_name == "tape"
          # Directory permissions, no visibility to managed etc. at this stage
          - tree["/dumped"].pw_name        == "root"
          - tree["/dumped"].gr_name        == "root"
          - tree["/dumped"].mode           == "0755"
          - tree["/dumped/d1"].pw_name     == "root"
          - tree["/dumped/d1"].gr_name     == "root"
          - tree["/dumped/d1"].mode        == "0755"
          - tree["/dumped/d2"].pw_name     == "root"
          - tree["/dumped/d2"].gr_name     == "root"
          - tree["/dumped/d2"].mode        == "0755"
          - tree["/dumped/d3"].pw_name     == "sync"
          - tree["/dumped/d3"].gr_name     == "tape"
          - tree["/dumped/d3"].mode        == "0700"
          - tree["/dumped/d3/d31"].pw_name == "sync"
          - tree["/dumped/d3/d31"].gr_name == "video"
          - tree["/dumped/d3/d31"].mode    == "0700"
          # Default ignore pattern, don't transfer .keep or _keep
          # But d2 contains [._]keep.j2, which does get transfered to become [._]keep
          - ("/dumped/d1/.keep" not in tree)
          - ("/dumped/d1/_keep" not in tree)
          - ("/dumped/d2/.keep" in tree)
          - ("/dumped/d2/_keep" in tree)
          # Inherit from mail/kmem from directory, with overwrites
          - tree["/dumped/d5"].pw_name == "mail"
          - tree["/dumped/d5"].gr_name == "kmem"
          - tree["/dumped/d5"].mode == "0755"
          - tree["/dumped/d5/f1"].pw_name == "games"
          - tree["/dumped/d5/f1"].gr_name == "dialout"
          - tree["/dumped/d5/f1"].mode == "0600"
          - tree["/dumped/d5/p1"].pw_name == "mail"
          - tree["/dumped/d5/p1"].gr_name == "kmem"
          - tree["/dumped/d5/p1"].mode == "0644"
          - tree["/dumped/d5/p2"].pw_name == "games"
          - tree["/dumped/d5/p2"].gr_name == "tty"
          - tree["/dumped/d5/p2"].mode == "0600"
          - tree["/dumped/d5/p3"].pw_name == "mail"
          - tree["/dumped/d5/p3"].gr_name == "kmem"
          - tree["/dumped/d5/p3"].mode == "0644"
          # f2 is set to mode 467, but we overwrite the executable bit
          # Only d1/f2 is actually executable
          - tree["/dumped/d1/f2"].mode == "0577"
          - tree["/dumped/d2/f2"].mode == "0466"
          - tree["/dumped/d3/f2"].mode == "0600"
          - ("/dumped/weird_names/UTF_Моя_строка" in tree)
          - ("/dumped/weird_names/🤓👉🙀🎩🛀🏼" in tree)
          - tree["/dumped/weird_names/🤓👉🙀🎩🛀🏼"].gr_name == "daemon"
          # Layering /dumped/d4/d41/d411/d4111/layer1
          # /dumped is unmanaged = defaults --> root:root:755
          - tree["/dumped"].pw_name == "root"
          - tree["/dumped"].gr_name == "root"
          - tree["/dumped"].mode == "0755"
          # d4 .permissions.yml sets owner=bin --> bin:root:755
          - tree["/dumped/d4"].pw_name == "bin"
          - tree["/dumped/d4"].gr_name == "root"
          - tree["/dumped/d4"].mode == "0755"
          # d41 regex sets managed and group=video --> bin:video:755
          - tree["/dumped/d4/d41"].pw_name == "bin"
          - tree["/dumped/d4/d41"].gr_name == "video"
          - tree["/dumped/d4/d41"].mode == "0755"
          # d411 exact sets managed mode=4046 --> bin:video:4057
          - tree["/dumped/d4/d41/d411"].pw_name == "bin"
          - tree["/dumped/d4/d41/d411"].gr_name == "video"
          - tree["/dumped/d4/d41/d411"].mode == "4057"
          # d411 .permissions is empty --> bin:video:057
          - tree["/dumped/d4/d41/d411/d4111"].pw_name == "bin"
          - tree["/dumped/d4/d41/d411/d4111"].gr_name == "video"
          - tree["/dumped/d4/d41/d411/d4111"].mode == "4057"
          # Inherit everything, nothing new
          - tree["/dumped/d4/d41/d411/d4111/d11111"].pw_name == "bin"
          - tree["/dumped/d4/d41/d411/d4111/d11111"].gr_name == "video"
          - tree["/dumped/d4/d41/d411/d4111/d11111"].mode == "4057"
          # layer1 inherits from the directory
          - tree["/dumped/d4/d41/d411/d4111/layer1"].pw_name == "bin"
          - tree["/dumped/d4/d41/d411/d4111/layer1"].gr_name == "video"
          - tree["/dumped/d4/d41/d411/d4111/layer1"].mode == "4046"
          # layer2 sets owner via regex
          - tree["/dumped/d4/d41/d411/d4111/layer2"].pw_name == "root"
          - tree["/dumped/d4/d41/d411/d4111/layer2"].gr_name == "video"
          - tree["/dumped/d4/d41/d411/d4111/layer2"].mode == "4046"
          # layer3 sets owner via exact
          - tree["/dumped/d4/d41/d411/d4111/layer3"].pw_name == "nobody"
          - tree["/dumped/d4/d41/d411/d4111/layer3"].gr_name == "video"
          - tree["/dumped/d4/d41/d411/d4111/layer3"].mode == "4046"
          # layer21 sets owner via regex, group by exact, mode from directory
          - tree["/dumped/d4/d41/d411/d4111/layer21"].pw_name == "root"
          - tree["/dumped/d4/d41/d411/d4111/layer21"].gr_name == "adm"
          - tree["/dumped/d4/d41/d411/d4111/layer21"].mode == "4046"


    - name: Get file contents
      ansible.builtin.slurp:
        src: "{{ item }}"
      loop:
        - /etc/bob/smith
        - /etc/bob/smithy
      register: slurped

    #- name: Dump
    #  ansible.builtin.debug:
    #    var: slurped

    - name: Set up contents for lookups
      ansible.builtin.set_fact:
        contents_b64: "{{ slurped.results | items2dict(key_name='source', value_name='content') }}"

    - name: Test file contents
      ansible.builtin.assert:
        that:
          - contents_b64['/etc/bob/smith'] | b64decode == "SMITH\n"
          - contents_b64['/etc/bob/smithy'] | b64decode == "templated\n"
          # TODO: Test layers of variable sources, facts, automatics, task vars etc.
          # ansible_hostname and ansible_facts['nodename'] are both remote system, could do a local setup
          # Probably better to switch variable
